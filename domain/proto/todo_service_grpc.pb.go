// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: todo_service.proto

package todo_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TodoService_CreateToDo_FullMethodName        = "/TodoService/CreateToDo"
	TodoService_GetToDo_FullMethodName           = "/TodoService/GetToDo"
	TodoService_GetAllToDos_FullMethodName       = "/TodoService/GetAllToDos"
	TodoService_GetAllToDosStream_FullMethodName = "/TodoService/GetAllToDosStream"
	TodoService_UpdateToDo_FullMethodName        = "/TodoService/UpdateToDo"
	TodoService_DeleteToDo_FullMethodName        = "/TodoService/DeleteToDo"
)

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	CreateToDo(ctx context.Context, in *CreateToDoMessage, opts ...grpc.CallOption) (*ToDo, error)
	GetToDo(ctx context.Context, in *GetToDoMessage, opts ...grpc.CallOption) (*ToDo, error)
	GetAllToDos(ctx context.Context, in *GetAllToDosMessage, opts ...grpc.CallOption) (*ToDos, error)
	// how would this work in http??????
	GetAllToDosStream(ctx context.Context, in *GetAllToDosMessage, opts ...grpc.CallOption) (TodoService_GetAllToDosStreamClient, error)
	UpdateToDo(ctx context.Context, in *UpdateToDoMessage, opts ...grpc.CallOption) (*ToDo, error)
	DeleteToDo(ctx context.Context, in *DeleteToDoMessage, opts ...grpc.CallOption) (*ToDo, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) CreateToDo(ctx context.Context, in *CreateToDoMessage, opts ...grpc.CallOption) (*ToDo, error) {
	out := new(ToDo)
	err := c.cc.Invoke(ctx, TodoService_CreateToDo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetToDo(ctx context.Context, in *GetToDoMessage, opts ...grpc.CallOption) (*ToDo, error) {
	out := new(ToDo)
	err := c.cc.Invoke(ctx, TodoService_GetToDo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetAllToDos(ctx context.Context, in *GetAllToDosMessage, opts ...grpc.CallOption) (*ToDos, error) {
	out := new(ToDos)
	err := c.cc.Invoke(ctx, TodoService_GetAllToDos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetAllToDosStream(ctx context.Context, in *GetAllToDosMessage, opts ...grpc.CallOption) (TodoService_GetAllToDosStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[0], TodoService_GetAllToDosStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceGetAllToDosStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TodoService_GetAllToDosStreamClient interface {
	Recv() (*ToDo, error)
	grpc.ClientStream
}

type todoServiceGetAllToDosStreamClient struct {
	grpc.ClientStream
}

func (x *todoServiceGetAllToDosStreamClient) Recv() (*ToDo, error) {
	m := new(ToDo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) UpdateToDo(ctx context.Context, in *UpdateToDoMessage, opts ...grpc.CallOption) (*ToDo, error) {
	out := new(ToDo)
	err := c.cc.Invoke(ctx, TodoService_UpdateToDo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) DeleteToDo(ctx context.Context, in *DeleteToDoMessage, opts ...grpc.CallOption) (*ToDo, error) {
	out := new(ToDo)
	err := c.cc.Invoke(ctx, TodoService_DeleteToDo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServiceServer is the server API for TodoService service.
// All implementations must embed UnimplementedTodoServiceServer
// for forward compatibility
type TodoServiceServer interface {
	CreateToDo(context.Context, *CreateToDoMessage) (*ToDo, error)
	GetToDo(context.Context, *GetToDoMessage) (*ToDo, error)
	GetAllToDos(context.Context, *GetAllToDosMessage) (*ToDos, error)
	// how would this work in http??????
	GetAllToDosStream(*GetAllToDosMessage, TodoService_GetAllToDosStreamServer) error
	UpdateToDo(context.Context, *UpdateToDoMessage) (*ToDo, error)
	DeleteToDo(context.Context, *DeleteToDoMessage) (*ToDo, error)
	mustEmbedUnimplementedTodoServiceServer()
}

// UnimplementedTodoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServiceServer struct {
}

func (UnimplementedTodoServiceServer) CreateToDo(context.Context, *CreateToDoMessage) (*ToDo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToDo not implemented")
}
func (UnimplementedTodoServiceServer) GetToDo(context.Context, *GetToDoMessage) (*ToDo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToDo not implemented")
}
func (UnimplementedTodoServiceServer) GetAllToDos(context.Context, *GetAllToDosMessage) (*ToDos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllToDos not implemented")
}
func (UnimplementedTodoServiceServer) GetAllToDosStream(*GetAllToDosMessage, TodoService_GetAllToDosStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllToDosStream not implemented")
}
func (UnimplementedTodoServiceServer) UpdateToDo(context.Context, *UpdateToDoMessage) (*ToDo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToDo not implemented")
}
func (UnimplementedTodoServiceServer) DeleteToDo(context.Context, *DeleteToDoMessage) (*ToDo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToDo not implemented")
}
func (UnimplementedTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	s.RegisterService(&TodoService_ServiceDesc, srv)
}

func _TodoService_CreateToDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateToDoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).CreateToDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_CreateToDo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).CreateToDo(ctx, req.(*CreateToDoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetToDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToDoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetToDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_GetToDo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetToDo(ctx, req.(*GetToDoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetAllToDos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllToDosMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetAllToDos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_GetAllToDos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetAllToDos(ctx, req.(*GetAllToDosMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetAllToDosStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllToDosMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServiceServer).GetAllToDosStream(m, &todoServiceGetAllToDosStreamServer{stream})
}

type TodoService_GetAllToDosStreamServer interface {
	Send(*ToDo) error
	grpc.ServerStream
}

type todoServiceGetAllToDosStreamServer struct {
	grpc.ServerStream
}

func (x *todoServiceGetAllToDosStreamServer) Send(m *ToDo) error {
	return x.ServerStream.SendMsg(m)
}

func _TodoService_UpdateToDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateToDoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).UpdateToDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_UpdateToDo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).UpdateToDo(ctx, req.(*UpdateToDoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_DeleteToDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteToDoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).DeleteToDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_DeleteToDo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).DeleteToDo(ctx, req.(*DeleteToDoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoService_ServiceDesc is the grpc.ServiceDesc for TodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateToDo",
			Handler:    _TodoService_CreateToDo_Handler,
		},
		{
			MethodName: "GetToDo",
			Handler:    _TodoService_GetToDo_Handler,
		},
		{
			MethodName: "GetAllToDos",
			Handler:    _TodoService_GetAllToDos_Handler,
		},
		{
			MethodName: "UpdateToDo",
			Handler:    _TodoService_UpdateToDo_Handler,
		},
		{
			MethodName: "DeleteToDo",
			Handler:    _TodoService_DeleteToDo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllToDosStream",
			Handler:       _TodoService_GetAllToDosStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "todo_service.proto",
}
